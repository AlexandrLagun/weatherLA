{"version":3,"sources":["components/Header.jsx","components/InputLocation.jsx","components/Forecast1Day.jsx","components/CardWeather.jsx","components/Forecast5Days.jsx","components/WeatherDisplay.jsx","components/WeatherApp.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","className","InputLocation","props","state","location","handleChange","bind","e","this","onChange","target","value","days","onSubmit","type","placeholder","term","id","React","Component","Forecast1Day","weatherData","data","weather","imgUrl","icon","main","name","src","alt","description","temp","feels_like","temp_max","temp_min","wind","speed","toFixed","pressure","humidity","CardWeather","ms","day","dt","date","Date","weekday","toLocaleString","month","dat","getDate","toString","city","Math","round","Forecast5Days","formatForecast","map","index","main5Days","key","FORECASTS","WeatherDisplay","activeForecast","daysCount","forecast1Day","forecastData1Day","forecast5Days","forecastData5Days","main5DaysData","forecast","onClick","setState","WeatherApp","handleInputChange","val","URL1","fetch","then","response","ok","json","weatherData1day","console","log","status","statusText","URL5","daily5forecast","list","filter","reading","dt_txt","includes","weatherData5days","mainData5days","forecast1DayData","forecast5DayData","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cde8587e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Header.css';\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <div className=\"logo\">\r\n      The WeatherApp\r\n    </div> \r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass InputLocation extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {location: \"\"};\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.onChange(e.target.value);   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.props.days}</div>\r\n        <div className=\"ui category search\">\r\n        <form onSubmit={this.onSubmit} className=\"ui form\">\r\n          <h3 className=\"ChangeText\">Change your location:</h3>\r\n          <br />\r\n          <div className=\"ui icon input\">\r\n            <input\r\n              className=\"prompt\"\r\n              type=\"text\"\r\n              placeholder=\"Search city...\"\r\n              value={this.state.term}\r\n              onChange={this.handleChange}\r\n            />\r\n            <div id=\"error\">\r\n            </div>\r\n          </div>\r\n        </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default InputLocation;\r\n","import React from 'react';\r\n\r\nclass Forecast1Day extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() { \r\n    const weatherData = this.props.data;\r\n    if (!weatherData) return <div>Loading</div>;\r\n    const weather = weatherData.weather[0];\r\n    const imgUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n    return (\r\n      <div>\r\n        <h1>\r\n          {weather.main} in {weatherData.name} \r\n          <img src={imgUrl} alt={weatherData.description} />\r\n        </h1>\r\n        <p>Current: {weatherData.main.temp}°</p>\r\n        <p>Feels like: {weatherData.main.feels_like}°</p>\r\n        <p>High: {weatherData.main.temp_max}°</p>\r\n        <p>Low: {weatherData.main.temp_min}°</p>\r\n        <p>Wind Speed: {(weatherData.wind.speed*1.6/3.6).toFixed(2)} m/s</p>\r\n        <p>Pressure: {weatherData.main.pressure} GPa</p>\r\n        <p>Humidity: {weatherData.main.humidity} %</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Forecast1Day;\r\n\r\n","import React from 'react';\r\nimport '../styles/CardWeather.css';\r\n\r\n\r\nclass CardWeather extends React.Component {\r\n  // Props: day, key(index)\r\n\r\n  render() {    \r\n    const ms = this.props.day.dt * 1000;\r\n    const date = new Date(ms);\r\n    const weekday = date.toLocaleString(\"en\", {weekday: \"long\"});\r\n    const month = date.toLocaleString(\"en\", {month: \"long\"});\r\n    const dat = date.getDate().toString();\r\n\r\n\r\n        const imgUrl = \"http://openweathermap.org/img/w/\" + this.props.day.weather[0].icon + \".png\";\r\n\r\n    return (\r\n      <div className=\"cardWeather\">\r\n        <h2>{weekday} - {month} {dat}</h2>\r\n        <h3>{this.props.day.weather[0].main} in {this.props.data.city.name}\r\n        <img src={imgUrl} alt={ this.props.day.weather[0].icon.description} />\r\n        </h3>\r\n        \r\n        <p>Temperature: {Math.round(this.props.day.main.temp)} °C</p>\r\n        <p>Humidity: {this.props.day.main.humidity} %</p>\r\n        <p>Pressure: {this.props.day.main.pressure} GPa</p>\r\n        <div>\r\n          {this.props.day.weather[0].description}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardWeather\r\n\r\n","import React from 'react';\r\nimport CardWeather from './CardWeather';\r\n\r\nclass Forecast5Days extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n\r\n    this.formatForecast = this.formatForecast.bind(this);\r\n  }\r\n\r\n  formatForecast() {\r\n    return this.props.data.map((day, index) => <CardWeather day={day} data={this.props.main5Days} key={index}/>);\r\n  }\r\n\r\n  render() {\r\n    const weatherData = this.props.data;\r\n    if (!weatherData) return <div>Loading</div>;\r\n    return (\r\n    <div>\r\n  \r\n      <div>\r\n      {this.formatForecast()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast5Days;\r\n\r\n\r\n","import React from 'react';\r\nimport Forecast1Day from './Forecast1Day';\r\nimport Forecast5Days from './Forecast5Days';\r\nimport '../styles/WeatherDisplay.css';\r\n\r\n\r\nconst FORECASTS = [\r\n  \"Forecast for 1 day\",\r\n  \"Forecast for 5 days\"\r\n   ];\r\n\r\nclass WeatherDisplay extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeForecast: 0\r\n      \r\n    }; \r\n  }\r\n\r\n  render() {\r\n   \r\n    const activeForecast = this.state.activeForecast;\r\n    let daysCount = 0;\r\n    switch(activeForecast) {\r\n      case 0: daysCount = 1;\r\n      break;\r\n      case 1: daysCount = 5;\r\n      break;\r\n      default: daysCount = 1;\r\n      break;\r\n    }\r\n\r\n    const forecast1Day = <Forecast1Day data={this.props.forecastData1Day} />\r\n    const forecast5Days = <Forecast5Days data={this.props.forecastData5Days} main5Days={this.props.main5DaysData}/>\r\n   \r\n    const forecast = (daysCount === 1) ? forecast1Day : forecast5Days;\r\n\r\n    return  (\r\n    <div>\r\n      \r\n      <div>\r\n        {FORECASTS.map((forecast, index) => (\r\n          <button className=\"changeButton\"\r\n            key={index}\r\n            onClick={() => {this.setState({activeForecast: index})}}\r\n          >\r\n              {FORECASTS[index]}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      \r\n      {forecast}\r\n        \r\n    </div>\r\n    );\r\n  }\r\n}\r\nexport default WeatherDisplay;\r\n\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport InputLocation from './InputLocation';\r\nimport WeatherDisplay from './WeatherDisplay';\r\nimport '../styles/WeatherApp.css';\r\n\r\nclass WeatherApp extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n     city: \"Minsk\"\r\n    };\r\n    this.handleInputChange=this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(val){\r\n    this.setState({city: val})\r\n    \r\n    const URL1 = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=metric&appid=1e4c421010fe9c56a53328876e017b5c`;\r\n\r\n    fetch(URL1).then(response => {\r\n      if(response.ok) {\r\n        response.json().then(data => {\r\n          this.setState({ weatherData1day: data });\r\n        });\r\n      } else {\r\n        console.log('Network request for json failed with response ' + response.status + ': ' + response.statusText);\r\n      }\r\n    });\r\n\r\n    const URL5 = `https://api.openweathermap.org/data/2.5/forecast?q=${this.state.city}&units=metric&appid=1e4c421010fe9c56a53328876e017b5c`;\r\n\r\n    fetch(URL5).then(response => {\r\n      if(response.ok) {\r\n        response.json().then(data => {\r\n          const daily5forecast = data.list.filter(reading => reading.dt_txt.includes(\"12:00:00\"));\r\n          this.setState({ weatherData5days: daily5forecast, mainData5days: data });\r\n        });\r\n      } else {\r\n        console.log('Network request for json failed with response ' + response.status + ': ' + response.statusText);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    \r\n    const forecast1DayData = this.state.weatherData1day;\r\n    const forecast5DayData = this.state.weatherData5days;\r\n    const main5DaysData = this.state.mainData5days;\r\n\r\n    return  (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-article\">\r\n      <InputLocation onChange={this.handleInputChange}/>\r\n      <WeatherDisplay forecastData1Day={forecast1DayData} forecastData5Days={forecast5DayData} main5DaysData={main5DaysData}/>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\nexport default WeatherApp;","import React from 'react';\r\nimport WeatherApp from './WeatherApp';\r\n\r\nconst App = () => <WeatherApp />;\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}